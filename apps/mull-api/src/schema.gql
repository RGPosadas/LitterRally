# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Channel {
  id: Int!
  posts: [Post!]!
}

input ChannelInput {
  id: Float!
}

input CreateDmChannelInput {
  participants: [UserInput!]!
}

input CreateEventChannelInput {
  name: String!
  rights: Float!
}

input CreateEventInput {
  description: String!
  endDate: DateTime!
  image: MediaInput!
  location: LocationInput!
  restriction: Int!
  startDate: DateTime!
  title: String!
}

input CreatePostInput {
  channel: ChannelInput!
  createdTime: DateTime!
  medias: MediaInput
  message: String!
  parentPost: ParentPostInput
  reactions: PostReactionInput
}

input CreateUserInput {
  dob: DateTime
  email: String!
  joinDate: DateTime!
  name: String!
  password: String
  registrationMethod: RegistrationMethod!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DirectMessageChannel {
  id: Int!
  participants: [User!]!
  posts: [Post!]!
}

type Event {
  coHosts: [User!]!
  description: String!
  endDate: DateTime!
  host: User!
  id: Int!
  image: Media
  location: Location
  restriction: Float!
  startDate: DateTime!
  title: String!
}

type EventChannel {
  event: Event
  id: Int!
  name: String!
  posts: [Post!]!
  rights: Int!
}

type Location {
  coordinates: Point
  id: Int!
  placeId: String
  title: String!
}

input LocationInput {
  coordinates: PointInput
  placeId: String
  title: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResult {
  accessToken: String!
}

type Media {
  id: Float!
  mediaType: String!
}

input MediaInput {
  id: Float!
  mediaType: String!
}

type Mutation {
  createDmChannel(input: CreateDmChannelInput!): DirectMessageChannel!
  createEvent(event: CreateEventInput!): Event!
  createEventChannel(eventId: Int!, input: CreateEventChannelInput!): Boolean!
  createLocation(location: LocationInput!): Location!
  createUser(user: CreateUserInput!): User!
  deleteChannel(id: Int!): Boolean!
  deleteEvent(id: Int!): Event!
  deletePost(id: Int!): Post!
  deleteUser: User!
  joinEvent(eventId: Int!): Boolean!
  leaveEvent(eventId: Int!): Boolean!
  login(loginInput: LoginInput!): LoginResult!
  post(post: CreatePostInput!): Post!
  updateEvent(event: UpdateEventInput!): Event!
  updateFile(newFile: Upload!, oldFile: MediaInput!): Media!
  updatePost(post: UpdatePostInput!): Post!
  updateUser(newAvatar: Upload, userInput: UpdateUserInput!): User!
  uploadFile(file: Upload!): Media!
}

input ParentPostInput {
  id: Int!
}

type Point {
  id: Int!
  lat: Float!
  long: Float!
}

input PointInput {
  lat: Float!
  long: Float!
}

type Post {
  channel: EventChannel!
  createdTime: DateTime!
  id: Int!
  medias: [Media!]
  message: String!
  parentPost: Post
  reactions: [PostReaction!]
  user: User!
}

type PostReaction {
  id: Int!
  post: Post!
  type: Int!
  user: User!
}

input PostReactionInput {
  id: Int!
}

type Query {
  channelPosts(channelId: Int!): [Post!]!
  coHostEvents: [Event!]!
  discoverEvents: [Event!]!
  event(id: Int!): Event!
  events: [Event!]!
  friendCount: Int!
  getChannel(id: Int!): Channel!
  getChannelByEvent(channelName: String!, eventId: Int!): Channel!
  getDmChannel(input: CreateDmChannelInput!): DirectMessageChannel!
  getDmChannel(participants: [UserInput!]!): DirectMessageChannel
  getEventChannel(id: Int!): EventChannel!
  hostEvents: [Event!]!
  hostingCount: Int!
  isParticipant(eventId: Int!): Boolean!
  location(id: Int!): Location!
  participantEvents: [Event!]!
  portfolioCount: Int!
  posts: [Post!]!
  user: User!
  users: [User!]!
}

enum RegistrationMethod {
  FACEBOOK
  GOOGLE
  LOCAL
  TWITTER
}

type Subscription {
  postAdded(channelId: Int!): Post!
}

input UpdateEventInput {
  description: String
  endDate: DateTime
  id: Int!
  location: LocationInput!
  restriction: Int
  startDate: DateTime
  title: String
}

input UpdatePostInput {
  channel: ChannelInput!
  createdTime: DateTime!
  id: Int!
  medias: MediaInput
  message: String!
  parentPost: ParentPostInput
  reactions: PostReactionInput
}

input UpdateUserInput {
  avatar: MediaInput
  description: String
  dob: DateTime
  email: String
  id: Int!
  name: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: Media
  description: String!
  dob: DateTime
  email: String!
  friends: [User!]!
  id: Int!
  joinDate: DateTime!
  name: String!
  password: String
  registrationMethod: RegistrationMethod!
  timezone: String!
}

input UserInput {
  id: Int!
}

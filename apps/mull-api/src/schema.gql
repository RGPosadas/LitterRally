# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateEventInput {
  description: String!
  endDate: DateTime!
  image: MediaInput!
  location: LocationInput!
  restriction: Int!
  startDate: DateTime!
  title: String!
}

input CreateUserInput {
  dob: DateTime
  email: String!
  joinDate: DateTime!
  name: String!
  password: String
  registrationMethod: RegistrationMethod!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  description: String!
  endDate: DateTime!
  host: User!
  id: Int!
  image: Media
  location: Location
  restriction: Float!
  startDate: DateTime!
  title: String!
}

type Location {
  coordinates: Point
  id: Int!
  placeId: String
  title: String!
}

input LocationInput {
  coordinates: PointInput
  placeId: String
  title: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResult {
  accessToken: String!
}

type Media {
  id: Float!
  mediaType: String!
}

input MediaInput {
  id: Float!
  mediaType: String!
}

type Mutation {
  createEvent(event: CreateEventInput!): Event!
  createLocation(location: LocationInput!): Location!
  createUser(user: CreateUserInput!): User!
  deleteEvent(id: Int!): Event!
  deleteUser: User!
  joinEvent(eventId: Int!): Boolean!
  leaveEvent(eventId: Int!): Boolean!
  login(loginInput: LoginInput!): LoginResult!
  updateEvent(event: UpdateEventInput!): Event!
  updateFile(newFile: Upload!, oldFile: MediaInput!): Media!
  updateUser(newAvatar: Upload, userInput: UpdateUserInput!): User!
  uploadFile(file: Upload!): Media!
}

type Point {
  id: Int!
  lat: Float!
  long: Float!
}

input PointInput {
  lat: Float!
  long: Float!
}

type Query {
  coHostEvents: [Event!]!
  discoverEvents: [Event!]!
  event(id: Int!): Event!
  events: [Event!]!
  friendCount(id: Int!): Int!
  hostEvents: [Event!]!
  hostingCount(id: Int!): Int!
  isParticipant(eventId: Int!): Boolean!
  location(id: Int!): Location!
  participantEvents: [Event!]!
  portfolioCount(id: Int!): Int!
  user: User!
  users: [User!]!
}

enum RegistrationMethod {
  FACEBOOK
  GOOGLE
  LOCAL
  TWITTER
}

input UpdateEventInput {
  description: String
  endDate: DateTime
  id: Int!
  location: LocationInput!
  restriction: Int
  startDate: DateTime
  title: String
}

input UpdateUserInput {
  avatar: MediaInput
  description: String
  dob: DateTime
  email: String
  id: Int!
  name: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: Media
  description: String!
  dob: DateTime
  email: String!
  friends: [User!]!
  id: Int!
  joinDate: DateTime!
  name: String!
  password: String
  registrationMethod: RegistrationMethod!
  timezone: String!
}
